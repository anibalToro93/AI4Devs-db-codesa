// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum PositionStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEWING
  OFFERED
  REJECTED
  WITHDRAWN
}

enum InterviewResult {
  PASSED
  FAILED
  PENDING
}

model Company {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  employees   Employee[]
  positions   Position[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("company")
}

model Employee {
  id          Int         @id @default(autoincrement())
  companyId   Int         @map("company_id")
  name        String      @db.VarChar(100)
  email       String      @unique @db.VarChar(255)
  role        String      @db.VarChar(100)
  isActive    Boolean     @default(true) @map("is_active")
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviews  Interview[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("employee")
}

model InterviewFlow {
  id              Int             @id @default(autoincrement())
  description     String
  positions       Position[]
  interviewSteps  InterviewStep[]
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("interview_flow")
}

model InterviewType {
  id              Int             @id @default(autoincrement())
  name            String          @unique @db.VarChar(100)
  description     String?
  interviewSteps  InterviewStep[]
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("interview_type")
}

model Position {
  id                  Int             @id @default(autoincrement())
  companyId           Int             @map("company_id")
  interviewFlowId     Int             @map("interview_flow_id")
  title               String          @db.VarChar(200)
  description         String?
  status              PositionStatus  @default(DRAFT)
  isVisible           Boolean         @default(false) @map("is_visible")
  location            String?         @db.VarChar(100)
  jobDescription      String?         @map("job_description")
  requirements        String?
  responsibilities    String?
  salaryMin           Decimal?        @map("salary_min") @db.Decimal(10, 2)
  salaryMax           Decimal?        @map("salary_max") @db.Decimal(10, 2)
  employmentType      EmploymentType  @map("employment_type")
  benefits            String?
  companyDescription  String?         @map("company_description")
  applicationDeadline DateTime?       @map("application_deadline")
  contactInfo         String?         @map("contact_info")
  company             Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviewFlow       InterviewFlow   @relation(fields: [interviewFlowId], references: [id], onDelete: Restrict)
  applications        Application[]
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")

  @@map("position")
}

model InterviewStep {
  id                Int             @id @default(autoincrement())
  interviewFlowId   Int             @map("interview_flow_id")
  interviewTypeId   Int             @map("interview_type_id")
  name              String          @db.VarChar(100)
  orderIndex        Int             @map("order_index")
  interviewFlow     InterviewFlow   @relation(fields: [interviewFlowId], references: [id], onDelete: Cascade)
  interviewType     InterviewType   @relation(fields: [interviewTypeId], references: [id], onDelete: Restrict)
  interviews        Interview[]
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@unique([interviewFlowId, orderIndex])
  @@map("interview_step")
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @map("first_name") @db.VarChar(100)
  lastName          String            @map("last_name") @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("candidate")
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime  @map("start_date")
  endDate       DateTime? @map("end_date")
  candidateId   Int       @map("candidate_id")
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("education")
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  candidateId Int       @map("candidate_id")
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("work_experience")
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @map("file_path") @db.VarChar(500)
  fileType    String    @map("file_type") @db.VarChar(50)
  uploadDate  DateTime  @map("upload_date")
  candidateId Int       @map("candidate_id")
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("resume")
}

model Application {
  id              Int             @id @default(autoincrement())
  positionId      Int             @map("position_id")
  candidateId     Int             @map("candidate_id")
  applicationDate DateTime        @default(now()) @map("application_date")
  status          ApplicationStatus @default(PENDING)
  notes           String?
  position        Position        @relation(fields: [positionId], references: [id], onDelete: Cascade)
  candidate       Candidate       @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  interviews      Interview[]
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@unique([positionId, candidateId])
  @@map("application")
}

model Interview {
  id              Int             @id @default(autoincrement())
  applicationId   Int             @map("application_id")
  interviewStepId Int             @map("interview_step_id")
  employeeId      Int             @map("employee_id")
  interviewDate   DateTime        @map("interview_date")
  result          InterviewResult @default(PENDING)
  score           Int?
  notes           String?
  application     Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interviewStep   InterviewStep   @relation(fields: [interviewStepId], references: [id], onDelete: Restrict)
  employee        Employee        @relation(fields: [employeeId], references: [id], onDelete: Restrict)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("interview")
}